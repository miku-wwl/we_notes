package com.imooc.log.stack.chapter4;

import lombok.extern.slf4j.Slf4j;

/**
 * <h1>使用 lombok 工具打日志</h1>
 * */
@Slf4j(topic = "qinyi")
public class UseLombokToLog {

    public static void main(String[] args) {

        log.info("use lombok to log: [{}]", UseLombokToLog.class.getName());
    }
}


这段代码展示了如何使用 Lombok 注解 `@Slf4j` 来简化日志记录的过程。下面是对代码的详细解析以及它所体现的一些调优思想。

### 代码解析

1. **Lombok 注解**:
   - 使用了 `@Slf4j` 注解，这是一个 Lombok 提供的注解，用于自动生成一个 `org.slf4j.Logger` 类型的静态成员变量 `log`。
   - `@Slf4j(topic = "qinyi")` 表示生成的 `Logger` 实例将具有一个名为 "qinyi" 的主题（topic）。

2. **日志记录**:
   - 在 `main` 方法中，使用 `log.info` 方法记录一条包含类名的日志信息。
   - 由于使用了占位符 `[{}]`，实际的日志消息将在日志级别启用时才会被构造，从而避免了不必要的字符串拼接。

### 调优思想

1. **代码简洁性**:
   - 通过使用 Lombok 的 `@Slf4j` 注解，可以省略手动创建 `Logger` 实例的代码。
   - 这有助于减少模板代码，使得代码更加简洁。

2. **性能优化**:
   - 使用占位符可以避免在日志级别未启用时进行不必要的字符串拼接。
   - 这有助于提高性能，尤其是在高负载情况下。

3. **可读性和可维护性**:
   - 通过使用占位符和 Lombok 自动生成的 `Logger` 实例，可以使日志消息更具可读性。
   - 清晰的日志记录有助于维护和调试代码。

4. **避免日志框架锁定**:
   - 通过使用 SLF4J 作为日志门面，可以在不修改代码的情况下更换日志框架。
   - 这有助于避免对某一特定日志框架的依赖。

5. **日志配置**:
   - 日志框架通常通过外部配置文件来配置日志级别和其他设置。
   - 这样可以在不修改代码的情况下调整日志配置。

### 实际应用场景

在实际应用中，这种使用 Lombok 来简化日志记录的方法适用于以下场景：
- 当你需要简化日志记录代码，使其更加简洁时。
- 当你需要确保日志记录逻辑不会影响到核心业务逻辑的性能时。
- 当你需要在不修改代码的情况下调整日志级别时。

总结来说，这段代码示例通过展示如何使用 Lombok 的 `@Slf4j` 注解来简化日志记录的过程，体现了代码简洁性、性能优化、可读性和可维护性、避免日志框架锁定以及日志配置等调优思想。这对于提高代码的性能、可读性和可维护性非常重要。